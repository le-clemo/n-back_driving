(set-task "actr.tasks.driving.Driving")

(sgp
    :iu 10
    :bll 0.5
    :digit-detect-delay .050
    :digit-recode-delay .250
    :visual-onset-span 500.0
    :visual-finst-span 3.0
    :emma t
    :v t
    ;---
    :rt -100
    :ans 0.3
    :mp 8
    :lf 1
    ;---
    ;:act t
    ;:brain-imaging t
    ;:bout t
    :qs 1.0
    
    ; :egs 0.3    
)


(add-dm    
    (goal1 isa nback status start
        0back	0	1back 0	2back 0 	3back 0
        0speed 0	1speed 0	2speed 0	3speed 0
        0time 0	1time 0	2time 0	3time 0
        list-time 0
        true0back 0	true1back 0 true2back 0 true3back 0 
        id-on-list-0 0	id-on-list-1 0 id-on-list-2 0  id-on-list-3 0
        list 0		position zero )
    
    (init-list isa nback-list		list-id 0	time 0
        0back 0	1back 0	2back 0	3back 0)
    
    (goal2 isa drive follow far sl 2 nbackspeed 60 adjust-speed f num 0)
)
(set-all-base-levels 10000)

(p start
        ;;create an empty imaginal chunk
    =goal>
        isa nback
        status start
        ;?imaginal>
        ;state free
==>
    =goal>
        status notice
        num 0
        ;nr 0
        ;rehearsal f
        nbackspeed 60
        ; +imaginal>
        ;isa nback-state
        ;nbackspeed 60
        ;1back 0
    +temporal>
        isa time
        ticks clear
        ;-visual-location>
)

;----------------- DRIVING -----------------

(p drive*attend-near
    =goal>
        isa drive
        na nil
        - follow undecided
        
    ?visual-location> 
        ;state free
        buffer empty
        - buffer requested
        
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa drive
        safe nil
    +visual-location>
        isa visual-location
        kind near
)

(p drive*eval-safety-safe
    =goal>
        isa drive
        safe nil
        nbackspeed =nbackspeed
        - follow undecided
        ;- na nil
        ;- na2 nil
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
    !eval! (safe-zone)
        ; =imaginal>
==>
    !eval! (keep-limit =nbackspeed)
    =goal>
        isa drive
        safe t
        ;-visual-location>
        ;    =imaginal>
)

(p drive*eval-safety-unsafe*
    =goal>
        isa drive
        - follow undecided
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
    !eval! (not-safe-zone)
    !eval! (do-reset)
==>
    =goal>
        isa control
        safe f
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        time2 nil    
    =visual-location>
)

(p drive*eval-safety-unsafe
    =goal>
        isa drive
        - follow undecided
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
    !eval! (not-safe-zone)
    !eval! (do-not-reset)
==>
    =goal>
        isa control
        safe f
    =visual-location>
)

(p drive*process-near-attend-far
    =goal>
        isa control
        na nil
        follow far
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
    !bind! =na (image->angle =nx =nd)
    =goal>
        isa control
        na =na
    +visual-location>
        isa visual-location
        kind far
)

(p drive*process-near-attend-car
    =goal>
        isa control
        na nil
        follow car
        safe f
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
    !bind! =na (image->angle =nx =nd)
    =goal>
        isa control
        na =na
    +visual-location>
        isa visual-location
        kind car
)

(p drive*process-far
    =goal>
        isa control
        na =na
        fa nil
        na2    =na2
        fa2    =fa2
        fkind2 =fkind
        fthw2  =fthw2
        time2  =time2
        nbackspeed =nbackspeed
    =visual-location>
        isa visual-location
        kind far 
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
        ;=imaginal>
==>
    !bind! =fa (image->angle =fx =fd)
    !bind! =time (mp-time)
    !bind! =dna (- =na =na2)
    !bind! =dfa (- =fa =fa2)
    !bind! =dt (- =time =time2)
    !bind! =vna (my/ =dna =dt)
    !bind! =vfa (my/ =dfa =dt)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =dthw (- =fthw =fthw2)
    !eval! (do-steer =na =dna =dfa =dt)
    !eval! (keep-limit =nbackspeed)
    =goal>
        fkind =fkind
        fa =fa
        fd =fd
        vna =vna
        vfa =vfa
        time =time
        fthw =fthw
        dthw =dthw
        v =v
        done t
        ;=imaginal>
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(p drive*process-car
    =goal>
        isa control
        na =na
        fa nil
        na2    =na2
        fa2    =fa2
        fkind2 =fkind
        fthw2  =fthw2
        time2  =time2
        nbackspeed =nbackspeed
    =visual-location>
        isa visual-location
        kind car 
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
        ;=imaginal>
==>
    !bind! =fa (image->angle =fx =fd)
    !bind! =time (mp-time)
    !bind! =dna (- =na =na2)
    !bind! =dfa (- =fa =fa2)
    !bind! =dt (- =time =time2)
    !bind! =vna (my/ =dna =dt)
    !bind! =vfa (my/ =dfa =dt)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =dthw (- =fthw =fthw2)
    !eval! (do-steer =na =dna =dfa =dt)
        ;!eval! (keep-lane =na =dna =dfa =dt)
    !eval! (keep-limit =nbackspeed)
    =goal>
        fkind =fkind
        fa =fa
        fd =fd
        vna =vna
        vfa =vfa
        time =time
        fthw =fthw
        dthw =dthw
        v =v
        done t
        ;=imaginal>
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(p drive*process-without-old
    =goal>
        isa control
        na =na
        fa nil
    =visual-location>
        isa visual-location
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !bind! =fa (image->angle =fx =fd)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =time (mp-time)
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
)
(spp drive*process-without-old :u 7)

(p drive*loop-stable-far
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
    =visual>
        isa far
    !eval! (is-car-stable =na =vna =vfa)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
    +visual-location>
        isa visual-location
        kind car
        >= screen-x 0 ;annoying...
)

(p drive*loop-monitor-car-left*
        ;first time
    =goal>
        isa drive
        follow far
        sl =sl
        na nil
        fa nil
        na2 =na
        fa2 =fa
        ;fd2 =fd
        fkind2 =fkind
        time2 =time
        cthw nil
        cthw2 nil
    =visual-location>
        isa visual-location
        kind car
        distance =fd
        >= screen-x 0
        screen-x =fx
    !eval! (autocar-left =sl =fd =fx)
==>
    !bind! =v (get-velocity)
    !bind! =cthw (get-thw =fd =v)
    !bind! =dcthw (- =cthw =cthw2)
    =goal>
        isa drive
        ctwh2 =cthw
        cthw =cthw
        dcthw =dcthw
        fd =fd
)

(p drive*loop-monitor-car-left
    =goal>
        isa drive
        follow far
        sl =sl
        na nil
        fa nil
        cthw =cthw2
        dcthw =dcthw2
    =visual-location>
        isa visual-location
        kind car
        distance =fd
        >= screen-x 0
        screen-x =fx
    !eval! (autocar-left =sl =fd =fx)
    !eval! (car-not-too-close =fd =cthw2 =dcthw2)   
==>
    !bind! =v (get-velocity)
    !bind! =cthw (get-thw =fd =v)
    !bind! =dcthw (- =cthw =cthw2)
    =goal>
        isa drive
        ctwh2 =cthw2
        cthw =cthw
        dcthw =dcthw
        fd =fd
    -visual-location>
)

(p drive*loop-monitor-car-right
    =goal>
        isa drive
        follow far
        sl =sl
        na nil
        fa nil
    =visual-location>
        isa visual-location
        kind car
        distance =fd
        >= screen-x 0
        screen-x =fx
    !eval! (autocar-not-ahead =sl =fd =fx)
    !eval! (autocar-right =sl =fd =fx)
==>
    =goal>
        isa drive
)

(p drive*notice-construction
    =goal>
        isa drive
        ;- construction t
    =visual-location>
        isa visual-location
        kind construction
        :attended nil
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa drive
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location>
)

(p drive*process-construction-start
    =goal>
        isa drive
    =visual>
        isa construction
        value start
==>
    =goal>
        isa drive
        construction t
    -visual-location>
)

(p drive*process-construction-end
    =goal>
        isa drive
    =visual>
        isa construction
        value end
==>
    =goal>
        isa drive
        construction nil
    -visual-location>
)

(p drive*loop-stable-car
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        fthw =fthw
        dthw =dthw
        follow car
        sl =sl
    =visual>
        isa car
        value =cl
    !eval! (is-car-stable =na =vna =vfa)
    !eval! (car-not-too-close =fd =fthw =dthw)
    !eval! (same-lane =sl =cl)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)

(p drive*loop-stable-car-change-point
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        fthw =fthw
        dthw =dthw
        follow car
        sl =sl
    =visual>
        isa car
        value =cl
    !eval! (is-car-stable =na =vna =vfa)
    !eval! (car-not-too-close =fd =fthw =dthw)
    !eval! (not-same-lane =sl =cl)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
        follow far
)

(p drive*loop-stable-far-change-point
    =goal>
        isa drive
        follow far
        sl =sl
    =visual-location>
        isa visual-location
        kind car
        >= screen-x 0
        screen-x =fx
        distance =fd
    !eval! (autocar-ahead =sl =fd =fx) ;peripheral vision
==>
    =goal>
        isa drive
        follow car
    +visual-location>
        isa visual-location
        kind near
)

(p drive*init-overtake-attend-left-mirror
    =goal>
        isa control
        follow car
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        fd =fd
        fthw =fthw
        dthw =dthw
        sl =sl
        > sl 1
    =visual>
        isa car
        value =cl
    !eval! (car-too-close =fd =fthw =dthw)
    !eval! (dont-tailgate)
==>
    =goal>
        isa overtake
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
    +visual-location>
        isa visual-location
        kind left-mirror
)

(p drive*avoid-construction
    =goal>
        isa drive
        sl 1
        construction =t ; needs to exist
        construction t
    ?visual-location>
        state free
        buffer empty
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location>
        kind right-mirror
)

(p drive*tailgate
    =goal>
        isa control
        follow car
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        fd =fd
        fthw =fthw
        dthw =dthw
        sl =sl
        sl 2
    =visual>
        isa car
        value =cl
    !eval! (car-too-close =fd =fthw =dthw)
    !eval! (tailgate)
==>
    =goal>
        isa drive
        follow far
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
    +visual-location>
        isa visual-location
        kind near
    +temporal>
        isa time
        ticks clear
)

(p drive*init-overtake-attend-left-mirror-far
    =goal>
        isa drive
        follow far
        sl =sl
        > sl 1
        na nil
        fa nil
        na2 =na
        fa2 =fa
        ;fd2 =fd
        fkind2 =fkind
        time2 =time
        cthw =cthw2
        dcthw =dcthw2
    =visual-location>
        isa visual-location
        kind car
        distance =fd
        >= screen-x 0
        screen-x =fx
    !eval! (autocar-left =sl =fd =fx)
    !eval! (car-too-close =fd =cthw2 =dcthw2)   
==>
    =goal>
        isa overtake
    +visual-location>
        isa visual-location
        kind left-mirror
)

(p drive*loop-process-left-mirror
    =goal>
        isa overtake
    ?visual>
        buffer empty
        - state requested
    =visual-location>
        isa visual-location
        kind left-mirror
==>
    =goal>
        isa overtake
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location> ;sign won't be noticed
)

(p drive*loop-process-right-mirror
    =goal>
        isa drive
    ?visual>
        buffer empty
        - state requested
    =visual-location>
        isa visual-location
        kind right-mirror
    ?visual>
        buffer empty
        state free
==>
    =goal>
        isa overtake
        
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location> ;sign won't be noticed
)


(p drive*slow-down
    =goal>
        isa overtake
    =visual>
        isa =isa
        value =value
    !eval! (overtaking-not-safe =value)
    !eval! (merging)
==>
    !eval! (keep-limit 60)
    =goal>
        isa drive
        na nil
    +visual-location>
        isa visual-location
        kind right-mirror
)

(p drive*abort-changing-lane
    =goal>
        isa overtake
    =visual>
        isa =isa
        value =value
    !eval! (overtaking-not-safe =value)
    !eval! (not-merging)
==>
    =goal>
        isa drive
        na nil
    +temporal>
        isa time
        time clear
    +visual-location>
        isa visual-location
        kind near
)

(p drive*attend-left-lane
    =goal>
        isa overtake
    =visual>
        isa left-mirror
        value clear
==>
    =goal>
        isa overtake
    +visual-location>
        isa visual-location
        kind left-lane
)

(p drive*attend-right-lane
    =goal>
        isa overtake
    =visual>
        isa right-mirror
        value clear
==>
    =goal>
        isa overtake
    +visual-location>
        isa visual-location
        kind right-lane        
)

(p drive*process-right-lane
    =goal>
        isa overtake
    ?visual>
        buffer empty
        - state requested
    =visual-location>
        isa visual-location
        kind right-lane
==>
    =goal>
        isa overtake
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location>
)

(p drive*process-left-lane
    =goal>
        isa overtake
    ?visual>
        buffer empty
        - state requested
    =visual-location>
        isa visual-location
        kind left-lane
==>
    =goal>
        isa overtake
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location>
)

(p drive*loop-turn-left
    =goal>
        isa overtake
        sl =sl
        > sl 1
    =visual>
        isa left-lane
        value clear
==>
    !eval! (change-lane-left)
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        follow undecided
        sl =sl
        na nil 
        na2 nil
        fa nil
        fa2 nil
    +temporal>
        isa time
        ticks clear
    +visual-location>
        isa visual-location
        kind car
)

(p drive*loop-turn-right
    =goal>
        isa overtake
        sl =sl
        < sl 3
    =visual>
        isa right-lane
        value clear
==>
    !eval! (change-lane-right)
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        sl =sl
        na nil 
        na2 nil
        fa nil
        fa2 nil
        cthw nil
        cthw2 nil
        dthw nil
        follow undecided
        ;+temporal>
        ;isa time
        ;ticks clear
    +visual-location>
        isa visual-location
        kind car
        >= screen-x 320 ;right-side of environment
)

(p drive*merge-at-construction
    =goal>
        isa overtake
        sl 1
        construction t
    =visual>
        isa right-lane
        value clear
    !eval! (merging)
==>
    !eval! (change-lane-right)
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        sl =sl
        cthw nil
        cthw2 nil
        dthw nil
        follow undecided
    +visual-location>
        isa visual-location
        kind car
        ;>= screen-x 320 ;right-side of environment
)

(p drive*follow-far
    =goal>
        isa drive
        - follow far
    ?visual-location>        
        state error
==>
    =goal>
        isa drive
        follow far
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        time2 nil
    +visual-location>
        isa visual-location
        kind near
)

(p drive*follow-far2
    =goal>
        isa drive
        sl =sl
        follow undecided
    =visual>
        isa car
        value =cl
    !eval! (not-same-lane =sl =cl)
==>
    =goal>
        isa drive
        follow far        
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        time2 nil
    +visual-location>
        isa visual-location
        kind near
)

(p drive*follow-far3
    =goal>
        isa control
        - follow far
    ?visual-location>        
        state error
==>
    =goal>
        isa drive
        follow far
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        time2 nil
    +visual-location>
        isa visual-location
        kind near
)

(p drive*decide-follow
    =goal>
        isa drive
        follow undecided
    =visual-location>
        isa visual-location
        kind car
==>
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        sl =sl
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(p drive*follow-car
    =goal>
        isa drive
        sl =sl
        follow undecided
    =visual>
        isa car
        value =cl
    !eval! (same-lane =sl =cl)
==>
    =goal>
        isa drive
        follow car
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        time2 nil
    +visual-location>
        isa visual-location
        kind near
)

(p drive*glance-mirror-far
    =goal>
        isa drive
        follow far
        < sl 3
    =temporal>
        isa time
        > ticks 50
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location
        kind right-mirror
    +temporal>
        isa time
        ticks clear
)

(p drive*glance-mirror-car
    =goal>
        isa drive
        follow car
        < sl 3
        fthw =fthw
        >= fthw 4
        dthw =dthw
        > dthw 0
    =temporal>
        isa time
        > ticks 50
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location
        kind right-mirror
    +temporal>
        isa time
        ticks clear
)

(p drive*loop-not-stable-far
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
    =visual>
        isa far
    !eval! (is-car-not-stable =na =vna =vfa)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
)

(p drive*loop-not-stable-car
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        follow car
    =visual>
        isa car
    !eval! (is-car-not-stable =na =vna =vfa)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
)

(p drive*reset
    =goal>
        isa drive
        - follow undecided
    ?visual-location>
        state free
        buffer empty
        - buffer requested
    ?visual>
        state free
        buffer empty
==>
    =goal>
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        time2 nil
        safe nil
    +visual-location>
        isa visual-location
        kind near
        :attended new
)
(spp :u 1)

(p drive*reset2
    =goal>
        isa drive
        follow undecided
    ?visual-location>
        state free
        - buffer requested
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location
        kind car
)

;;----------------- Lane-change -----------------

(p drive*notice-car
    =goal>
        isa drive
        follow car
    ?visual>
        state free
        buffer empty
    =visual-location>
        isa visual-location
        kind car
        :attended new
==>
    !bind! =cl (autocar-lane)
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        cl =cl
        sl =sl
        follow undecided
    +visual>
        isa move-attention
        screen-pos =visual-location
)

;----------------- Speed-adjustment-----------------

(p adjust-speed-prep*
    =goal>
        isa	drive
        ;nbackspeed 	=nbackspeed
        adjust-speed	f
        ; num	=placeholder
    =visual>
        isa	speedsign
        value	=slimit
        ; ?retrieval>
        ;state	free
==>
    !bind! =num (get-num-sign)    
    =goal>
        isa	drive
        adjust-speed	t
        num	=num
    =visual>
)

(p adjust-speed-drive*
    =goal>
        isa	drive
        adjust-speed	t
        num	=placeholder
        < num 4
    =visual>
        isa	speedsign
        value	=slimit
        ;?imaginal>
        ;state	free
==>
    =goal>
        isa	drive
        nbackspeed	=slimit
        adjust-speed	f
        ;=visual>
)

(p adjust-speed-control*
    =goal>
        isa	control
        adjust-speed	t
        num	=placeholder
        < num 4
        ;nbackspeed	=nbackspeed
    =visual>
        isa	speedsign
        value	=slimit
        ;?imaginal>
        ;state	free
==>
    =goal>
        isa	control
        nbackspeed	=slimit
        adjust-speed	f
        ;=visual>
)

(p adjust-speed-drive
    =goal>
        isa	drive
        adjust-speed	t
        num	=placeholder
        >= num 4
    =retrieval>
        isa	nback-state
        slimit	=slimit
        ;?imaginal>
        ;state	free
==>
        ; !bind! =num (get-num-sign)
    =goal>
        isa	drive
        adjust-speed	f
        nbackspeed	=slimit
        ;=retrieval>
)

(p adjust-speed-control
    =goal>
        isa	control
        adjust-speed	t
        num	=placeholder
        >= num 4
    =retrieval>
        isa	nback-state
        slimit	=slimit
        ;?imaginal>
        ;state	free
==>
        ; !bind! =num (get-num-sign)
    =goal>
        isa	control
        adjust-speed	f
        nbackspeed	=slimit
        ; =retrieval>
)

;----------------- NBACK general-----------------
(p notice-sign
    =goal>
        isa nback
        - status	rehearse-2
        - status	store-list
    =visual-location>
        isa visual-location
        kind speedsign
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa nback
        status read-nback
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(spp :u 1000)


(p retrieve-list
    =goal>
        isa	nback
        status	read-nback
        ;num	=num
        
        0speed	=0speed
        1speed	=1speed
        2speed	=2speed
        
        0time		=0time
        1time		=1time
        2time		=2time
        
        list		=lid
        ;  - list		 0
        
        ;>= num 3
        true0back	=t0
        true1back	=t1
        true2back	=t2
        true3back	=t3
        
    =visual>
        isa	speedsign
        value	=slimit
==>
        ;!bind! =cid (get-chunk-id)
        ;!bind! =list_id (get-list-id)
        ; !bind! =num (get-num-sign)
        ;!bind! =nr (reset-rehearsal)
        
    !output! (Asked for list-id: =lid)
        
    =goal>
        isa		nback
        status		re-encode
        ;  num		=num
        list		=lid
        position	zero
        
        0speed	=slimit
        
        1speed	=0speed
        1time		=0time
        
        2speed	=1speed
        2time		=1time
        
        3speed	=2speed
        3time		=2time
        
        true0back	=slimit
        true1back	=t0
        true2back	=t1
        true3back	=t2
        
    +retrieval>
        isa		nback-list
        list-id		=lid
    =visual>
)


(p retrieve-former-2back
    =goal>
        isa		nback
        status		re-encode
        position 	zero
        
    =retrieval>
        isa		nback-list
        list-id		=lid
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
==>
    !output! (Retrieved list id 	=lid)
        
    =goal>
        isa		nback
        status		update-nbackspeed
        position 	zero
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
        
        id-on-list-0	=id0
        id-on-list-1	=id1
        id-on-list-2	=id2
        id-on-list-3	=id3
        
    +retrieval>
        isa		nback-state
        id		=id2
        
    -visual>     
)

(p skip-no-2back
    =goal>
        isa		nback
        status		re-encode
        position 	zero
        
    =retrieval>
        isa		nback-list
        list-id		=lid
        0back		=id0
        1back		=id1
        2back		0
==>
    !output! (Retrieved list id 	=lid)
        
    =goal>
        isa		nback
        status		retrieve-1back
        position 	zero
    =retrieval>
)

(p update-former-2back
    =goal>
        isa		nback
        status		update-nbackspeed
        num 		=num
        position 	zero
        
        0back		=id0
        1back		=id1
        2back		=id2
        
        3speed	=3speed
        
        true0back	=t0
        true1back	=t1
        true2back	=t2
        true3back	=t3
        
    =retrieval>
        isa		nback-state
        id		=id
        slimit		=slimit
        time		=3time
==>
    !bind! =state_id (get-state-id)
        
    !output! (------------------------------------------------)
    !output! (True nback speed limit: 	=t3)
    !output! (Imagined nbackspeed: 	=slimit)
    !output! (------------------------------------------------)
    !output! (Retrieved chunk:)
    !output! (speed: 	=slimit)
    !output! (id: 	=id)
    !output! (time: 	=3time)
    !output! (------------------------------------------------)
    !output! (New chunk)
    !output! (slimit:	=slimit)
    !output! (id: 	=state_id)
    !output! (time:	 =3time)
    !output! (------------------------------------------------)
        
    =goal>
        isa		nback
        status		retrieve-1back
        num 		=num
        position	 zero
        
        1back		=id0
        2back 	=id1
        3back		=state_id
        ;=imaginal>
    +imaginal>
        isa		nback-state
        id		=state_id
        slimit		=slimit
        position 	3
        time		=3time
    =retrieval>       
)


(p retrieve-former-1back
    =goal>
        isa		nback
        status		retrieve-1back
        position	zero
        1back		=id1
        ; ?imaginal>
        ;- buffer 	requested
==>
    =goal>
        isa		nback
        status		update-1back
    +retrieval>
        isa		nback-state
        id	 	=id1
        ;position 	1    
)

(p skip-no-1back
    =goal>
        isa		nback
        status		retrieve-1back
        position 	zero
        
    =retrieval>
        isa		nback-list
        list-id		=lid
        0back		=id0
        1back		0
==>
    !output! (Retrieved list id 	=lid)
        ;!output! (0back:)
        ;!output! (slimit: =zero , id: =id0 , time: =time0) 
        ;!output! (1back:)
        ;!output! (slimit: =one , id: =id1 , time: =time1) 
        ;!output! (2back)        
        ;!output! (slimit: =two , id: =id2 , time: =time2) 
        
    =goal>
        isa		nback
        status		retrieve-0back
        position 	zero
    =retrieval>
)

(p update-former-1back
    =goal>
        isa		nback
        status		update-1back
        num 		=num
        position 	zero
        
        0back		=id0
        
        2speed	=2speed
        
        true0back	=t0
        true1back	=t1
        true2back	=t2
        
    =retrieval>
        isa		nback-state
        id		=id
        slimit		=slimit
        time		=2time
==>
    !bind! =state_id (get-state-id)
        
    !output! (------------------------------------------------)
    !output! (2back speed limit: 	=t2)
    !output! (Imagined speed limit: 	=slimit)
    !output! (------------------------------------------------)
    !output! (Retrieved chunk:)
    !output! (speed: 	=slimit)
    !output! (id: 	=id)
    !output! (time: 	=2time)
    !output! (------------------------------------------------)
    !output! (New chunk)
    !output! (slimit:	=slimit)
    !output! (id: 	=state_id)
    !output! (time:	 =2time)
    !output! (------------------------------------------------)
        
    =goal>
        isa		nback
        status		retrieve-0back
        num 		=num
        position	 zero
        
        1back		=id0
        2back 	=id
    +imaginal>
        isa		nback-state
        id		=state_id
        slimit		=slimit
        position 	2
        time		=2time
)



(p retrieve-former-0back
    =goal>
        isa		nback
        status		retrieve-0back
        position	zero
        0back		=id0
    ?imaginal>
        - buffer 	requested
==>
    =goal>
        isa		nback
        status		update-0back
    +retrieval>
        isa		nback-state
        id	 	=id0
        ;position 	0
)

(p skip-no-0back
    =goal>
        isa		nback
        status		retrieve-0back
        position	zero
        
        0speed	=0speed
    =retrieval>
        isa		nback-list
        0back		0
    ?imaginal>
        - buffer 	requested
    =temporal>
        ticks		=time
==>
    !bind! =state_id (get-state-id)
    !output! (=state_id)
    =goal>
        isa		nback
        status		update-list
        position	list
        0back		=state_id
    +imaginal>
        isa		nback-state
        id		=state_id
        slimit		=0speed
        time		=time
        position	0
)

(p update-former-0back
    =goal>
        isa		nback
        status		update-0back
        list		=lid
        position 	zero
    =retrieval>
        isa		nback-state
        slimit		=slimit
        id		=id
        time		=time
        ;=imaginal>
        ;  isa		nback-state
        ;     id		=id2
==>
    !bind! =state_id (get-state-id)
        
    !output! (Retrieved chunk:)
    !output! (speed: 	=slimit)
    !output! (id:	 =id)
    !output! (time:	=time)
    !output! (-------------------)
    !output! (New chunk)
    !output! (slimit:	=slimit)
    !output! (id:	 =state_id)
    !output! (time:	 =time)
        
    =goal>
        isa		nback
        status		encode-new
        position 	zero
        
        1time		=time
        
        id-on-list-1	=state_id
        
    +imaginal>
        isa		nback-state
        slimit		=slimit
        id		=state_id
        time		=time    
        position	1
)



(p encode-new-sign
    =goal>
        isa		nback
        status		encode-new
        position 	zero
        
        0speed	=0speed	
        
        1back		=id1
        1time		=1time
    =imaginal>
        isa		nback-state
        id		=id
        time		=1time
    =temporal>
        ticks		=time
==>
    !bind! =state_id (get-state-id)
        
    !output! (New Chunk)
    !output! (id:	 =state_id)
    !output! (speed: 	=0speed)
    !output! (time: 	=time)
        
    =goal>
        isa		nback
        status		update-list
        position 	list
        
        0back		=state_id
        0time		=time
        
        1back		=id
    +imaginal>
        isa		nback-state
        id		=state_id
        slimit		=0speed
        time		=time
        position	0
)

(p update-list
    =goal>
        isa 		nback
        status 	update-list
        position 	list
        
        0back		=id0
        0speed	=0speed
        0time		=0time
        
        1back		=id1
        1speed	=1speed
        1time		=1time
        
        2back		=id2
        2speed	=2speed
        2time		=2time
        
        3back		=id3
        3speed	=3speed
        3time		=3time
    =imaginal>
        isa	nback-state
    =temporal>
        ticks	=time
==>
        
    !bind! =list_id (get-list-id)
        
    !output! (Created list (id: =list_id))
    !output! (0back)
    !output! (slimit: =0speed , id: =id0 , time: =0time) 
    !output! (1back)
    !output! (slimit: =1speed , id: =id1 , time: =1time) 
    !output! (2back)        
    !output! (slimit: =2speed , id: =id2 , time: =2time) 
    !output! (3back)        
    !output! (slimit: =3speed , id: =id3 , time: =3time)
        
    =goal>
        isa		nback
        status		rehearse-1
        0back		=id0
        position	 zero
        list		=list_id
        list-time	=time
        
        id-on-list-0	=id0
        id-on-list-1	=id1
        id-on-list-2	=id2
        id-on-list-3	=id3
    +imaginal>
        isa		nback-list
        list-id		=list_id
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
        time		=time
)

;----------------- NBACK rehearsal -----------------

(p rehearse-0back
    =goal>
        isa		nback
        status		rehearse-1
        position 	zero
        0time		=0time
        0speed	=0speed
    =imaginal>
        isa	nback-list
        ; list-id	=lid
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
    ?retrieval>
        state	free
==>
    !output! (Target chunk (0back):)
        ;!output! (slimit:	=0speed)
    !output! (id: 	=id0)
        ;    !output! (time: =0time)
        
    =goal>
        isa		nback
        status		rehearse-2
        position 	zero
        ;  list	=lid
    =imaginal>
    +retrieval>
        isa		nback-state
        id		=id0
        ;position 	0
        ;time	=time    
)

(p update-0back
    =goal>
        isa		nback
        status		rehearse-2
        position 	zero
        0speed	=0speed
        0time		=0time
    =retrieval>
        isa		nback-state
        id		=id
        slimit		=slimit
        time		=time
    =imaginal>
        0back		=id0
==>
        
    !output! (Retrieved chunk:)
    !output! (slimit:	 =slimit)
    !output! (id:	 =id)
        ; !output! (time:	 =time)
    !output! (--------------------------------------)
    !output! (Target chunk:)
    !output! (slimit:	 =0speed)
    !output! (id:	 =id0)
        ; !output! (time:	=0time)
        
    =goal>
        isa		nback
        status		rehearse-1
        0back		=id
        position 	one
        0speed	=slimit
    =imaginal>
)

(p skip-rehearse-1back
    =goal>
        isa		nback
        status		rehearse-1
        position	 one
        1time		=1time
        1speed	=1speed
    =imaginal>
        isa		nback-list
        1back		0
    ?retrieval>
        state	free 
==>
    =goal>
        isa		nback
        status		rehearse-1
        position 	two   
    =imaginal>
)

(p rehearse-1back
    =goal>
        isa		nback
        status		rehearse-1
        position 	one
        0time		=1time
        0speed	=1speed
    =imaginal>
        isa		nback-list
        ; list-id	=lid
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
    ?retrieval>
        state	free
==>
    !output! (Target chunk (1back):)
        ;!output! (slimit:	=0speed)
    !output! (id: 	=id1)
        ;    !output! (time: =0time)
        
    =goal>
        isa		nback
        status		rehearse-2
        position 	one
    =imaginal>
    +retrieval>
        isa		nback-state
        id		=id1
        ;position 	0
)

(p update-1back
    =goal>
        isa		nback
        status		rehearse-2
        position 	one
        1speed	=1speed
        1time		=1time
    =retrieval>
        isa	nback-state
        id	=id
        slimit	=slimit
        time	=time
    =imaginal>
        isa		nback-list
        1back		=id1
==>
        
    !output! (Retrieved chunk:)
    !output! (slimit: 	=slimit)
    !output! (id: 	=id)
    !output! (time: 	=time)
    !output! (--------------------------------------)
    !output! (Target chunk:)
    !output! (slimit: 	=1speed)
    !output! (id: 	=id1)
    !output! (time:	=1time)
        
    =goal>
        isa		nback
        status		rehearse-1
        1back		=id
        position 	two
        1speed	=slimit
    =imaginal>
)

(p rehearse-2back
    =goal>
        isa		nback
        status		rehearse-1
        position 	two
        
        2speed	=2speed
        2time		=2time
    =imaginal>
        isa		nback-list
        2back		=id2
    ?retrieval>
        state		free
==>
        ; !output! (Target chunk (2back):)
        ;    !output! (slimit:	=two)
        ;    !output! (id: =id2)
        ;    !output! (time: =time)     
        
    =goal>
        isa		nback
        status		rehearse-2
        position 	two 
    =imaginal>
    +retrieval>
        isa		nback-state
        id		=id2
        ;position	2
)

(p skip-rehearse-2back
    =goal>
        isa		nback
        status		rehearse-1
        position 	two
        2time		=2time
        2speed 	=2speed
    =imaginal>
        isa	nback-list
        2back	0
    ?retrieval>
        state	free 
==>
    =goal>
        isa		nback
        status		rehearse-1
        position	three   
    =imaginal>
)

(p update-2back
    =goal>
        isa		nback
        status		rehearse-2
        position 	two
        2speed	=2speed
        2time		=2time
    =retrieval>
        isa		nback-state
        id		=id
        slimit		=slimit
        time		=time
    =imaginal>
        2back		=id2
==>
    !output! (Retrieved chunk:)
    !output! (slimit:	 =slimit)
    !output! (id: 	=id)
    !output! (time:	 =time)
    !output! (--------------------------------------)
    !output! (Target chunk:)
    !output! (slimit:	 =2speed)
    !output! (id: 	=id2)
    !output! (time:	=2time)  
        
    =goal>
        isa		nback
        status		rehearse-1
        position 	three
        
        2back		=id
        2speed	=slimit
        
    =imaginal>
)

(p rehearse-3back
    =goal>
        isa		nback
        status		rehearse-1
        position 	three
        
        3speed	=3speed
        3time		=3time
    =imaginal>
        isa		nback-list
        3back		=id3
    ?retrieval>
        state		free
==>   
    =goal>
        isa		nback
        status		rehearse-2
        position 	three 
    =imaginal>
    +retrieval>
        isa		nback-state
        id		=id3
        ;position	2
)

(p skip-rehearse-3back
    =goal>
        isa		nback
        status		rehearse-1
        position 	three
        3time		=3time
        3speed 	=3speed
    =imaginal>
        isa		nback-list
        3back		0
    ?retrieval>
        state		free 
==>
    =goal>
        isa		nback
        status		new-list
        position	zero   
    =imaginal>
)

(p update-3back
    =goal>
        isa		nback
        status		rehearse-2
        position 	three
        3speed	=3speed
        3time		=3time
    =retrieval>
        isa		nback-state
        id		=id
        slimit		=slimit
        time		=time
    =imaginal>
        3back		=id3
==>
    !output! (Retrieved chunk:)
    !output! (slimit:	 =slimit)
    !output! (id: 	=id)
    !output! (time:	 =time)
    !output! (--------------------------------------)
    !output! (Target chunk:)
    !output! (slimit:	 =3speed)
    !output! (id: 	=id3)
    !output! (time:	=3time)  
        
    =goal>
        isa		nback
        status		new-list
        position 	zero
        
        3back		=id
        3speed	=slimit
        
    =imaginal>
)


(p enforce-list
    =goal>
        isa		nback
        status		new-list
        
        0back		=id0
        0speed	=0speed
        0time		=0time
        
        1back		=id1
        1speed	=1speed
        1time		=1time
        
        2back		=id2     
        2speed	=2speed
        2time		=2time
        
        3back		=id3     
        3speed	=3speed
        3time		=3time
        
        list		=lid
        list-time	=list-time
        
        id-on-list-0	=id0
        id-on-list-1	=id1
        id-on-list-2	=id2  
        id-on-list-3	=id3         
        
        true0back	=t0
        true1back	=t1
        true2back	=t2
        true3back	=t3
==>
        
    !output! (------------------------------------------------)
    !output! (0back speed limit: =t0)
    !output! (1back speed limit: =t1)
    !output! (2back speed limit: =t2)
    !output! (3back speed limit: =t3)
    !output! (Imagined speed limit: =3speed)
    !output! (------------------------------------------------)
    !output! (List id =lid)
    !output! (0back:)
    !output! (slimit: =0speed , id: =id0 , time: =0time) 
    !output! (1back:)
    !output! (slimit: =1speed , id: =id1 , time: =1time) 
    !output! (2back)        
    !output! (slimit: =2speed , id: =id2 , time: =2time) 
    !output! (3back)        
    !output! (slimit: =3speed , id: =id3 , time: =3time)
    !output! (------------------------------------------------)
        
    =goal>
        isa		nback
        status		rehearse-1
        position	 zero
        list		=lid
    +imaginal>
        isa		nback-list
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
        list-id		=lid     
        time		=list-time
)         

(p create-new-list
    =goal>
        isa	nback
        status	new-list
        
        0back		=id0
        0speed	=0speed
        0time		=0time
        
        1back		=id1
        1speed	=1speed
        1time		=1time
        
        2back		=id2     
        2speed	=2speed
        2time		=2time
        
        3back		=id3     
        3speed	=3speed
        3time		=3time
        
        true0back	=t0
        true1back	=t1
        true2back	=t2
        true3back	=t3
    =temporal>
        ticks		=time
==>
        ;!bind! =cid (get-chunk-id)
    !bind! =list_id (get-list-id)
        
    !output! (------------------------------------------------)
    !output! (0back speed limit: =t0)
    !output! (1back speed limit: =t1)
    !output! (2back speed limit: =t2)
    !output! (3back speed limit: =t3)
    !output! (Imagined speed limit: =3speed)
    !output! (------------------------------------------------)
    !output! (List id =lid)
    !output! (0back:)
    !output! (slimit: =0speed , id: =id0 , time: =0time) 
    !output! (1back:)
    !output! (slimit: =1speed , id: =id1 , time: =1time) 
    !output! (2back)        
    !output! (slimit: =2speed , id: =id2 , time: =2time) 
    !output! (3back)        
    !output! (slimit: =3speed , id: =id3 , time: =3time)
    !output! (------------------------------------------------)
        
    =goal>
        isa		nback
        status		store-list
        position	 zero
        list		=list_id
        list-time	=time
        
        id-on-list-0	=id0
        id-on-list-1	=id1
        id-on-list-2	=id2
        id-on-list-3	=id3
    +imaginal>
        isa		nback-list
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
        list-id		=list_id      
        time		=time
)         

(p store-new-list
    =goal>
        isa		nback
        status		store-list
    =imaginal>
        isa		nback-list
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
        list-id		=lid      
        time		=time
==>
    =goal>
        isa		nback
        status		rehearse-1
    +imaginal>
        isa		nback-list
        0back		=id0
        1back		=id1
        2back		=id2
        3back		=id3
        list-id		=lid      
        time		=time
)


(spp adjust-speed-prep* :u 10)
(spp adjust-speed-drive* :u 100)
(spp adjust-speed-control* :u 100)
(spp adjust-speed-drive :u 100)
(spp adjust-speed-control :u 100)

(spp enforce-list :u 100)
(spp skip-no-2back :u 100)
(spp skip-no-1back :u 100)
(spp skip-no-0back :u 100)
;(spp update-former-0back* :u 100)
(spp skip-rehearse-1back :u 100)
(spp skip-rehearse-2back :u 100)
(spp skip-rehearse-3back :u 100)
(spp retrieve-list :u 100)
(spp store-new-list :u 100)



(set-similarities    
    (1 1 0) ( 1 2 -0.2 ) ( 1 3 -0.4 ) ( 1 4 -0.6 ) ( 1 5 -0.8 ) ( 2 3 -0.2 ) ( 2 4 -0.4 ) ( 2 5 -0.6 ) ( 2 6 -0.8 ) ( 3 4 -0.2 ) ( 3 5 -0.4 ) ( 3 6 -0.6 ) ( 3 7 -0.8 ) ( 4 5 -0.2 ) ( 4 6 -0.4 ) ( 4 7 -0.6 ) ( 4 8 -0.8 ) ( 5 6 -0.2 ) ( 5 7 -0.4 ) ( 5 8 -0.6 ) ( 5 9 -0.8 ) ( 6 7 -0.2 ) ( 6 8 -0.4 ) ( 6 9 -0.6 ) ( 6 10 -0.8 ) ( 7 8 -0.2 ) ( 7 9 -0.4 ) ( 7 10 -0.6 ) ( 7 11 -0.8 ) ( 8 9 -0.2 ) ( 8 10 -0.4 ) ( 8 11 -0.6 ) ( 8 12 -0.8 ) ( 9 10 -0.2 ) ( 9 11 -0.4 ) ( 9 12 -0.6 ) ( 9 13 -0.8 ) ( 10 11 -0.2 ) ( 10 12 -0.4 ) ( 10 13 -0.6 ) ( 10 14 -0.8 ) ( 11 12 -0.2 ) ( 11 13 -0.4 ) ( 11 14 -0.6 ) ( 11 15 -0.8 ) ( 12 13 -0.2 ) ( 12 14 -0.4 ) ( 12 15 -0.6 ) ( 12 16 -0.8 ) ( 13 14 -0.2 ) ( 13 15 -0.4 ) ( 13 16 -0.6 ) ( 13 17 -0.8 ) ( 14 15 -0.2 ) ( 14 16 -0.4 ) ( 14 17 -0.6 ) ( 14 18 -0.8 ) ( 15 16 -0.2 ) ( 15 17 -0.4 ) ( 15 18 -0.6 ) ( 15 19 -0.8 ) ( 16 17 -0.2 ) ( 16 18 -0.4 ) ( 16 19 -0.6 ) ( 16 20 -0.8 ) ( 17 18 -0.2 ) ( 17 19 -0.4 ) ( 17 20 -0.6 ) ( 17 21 -0.8 ) ( 18 19 -0.2 ) ( 18 20 -0.4 ) ( 18 21 -0.6 ) ( 18 22 -0.8 ) ( 19 20 -0.2 ) ( 19 21 -0.4 ) ( 19 22 -0.6 ) ( 19 23 -0.8 ) ( 20 21 -0.2 ) ( 20 22 -0.4 ) ( 20 23 -0.6 ) ( 20 24 -0.8 ) ( 21 22 -0.2 ) ( 21 23 -0.4 ) ( 21 24 -0.6 ) ( 21 25 -0.8 ) ( 22 23 -0.2 ) ( 22 24 -0.4 ) ( 22 25 -0.6 ) ( 22 26 -0.8 ) ( 23 24 -0.2 ) ( 23 25 -0.4 ) ( 23 26 -0.6 ) ( 23 27 -0.8 ) ( 24 25 -0.2 ) ( 24 26 -0.4 ) ( 24 27 -0.6 ) ( 24 28 -0.8 ) ( 25 26 -0.2 ) ( 25 27 -0.4 ) ( 25 28 -0.6 ) ( 25 29 -0.8 ) ( 26 27 -0.2 ) ( 26 28 -0.4 ) ( 26 29 -0.6 ) ( 26 30 -0.8 ) ( 27 28 -0.2 ) ( 27 29 -0.4 ) ( 27 30 -0.6 ) ( 27 31 -0.8 ) ( 28 29 -0.2 ) ( 28 30 -0.4 ) ( 28 31 -0.6 ) ( 28 32 -0.8 ) ( 29 30 -0.2 ) ( 29 31 -0.4 ) ( 29 32 -0.6 ) ( 29 33 -0.8 ) ( 30 31 -0.2 ) ( 30 32 -0.4 ) ( 30 33 -0.6 ) ( 30 34 -0.8 ) ( 31 32 -0.2 ) ( 31 33 -0.4 ) ( 31 34 -0.6 ) ( 31 35 -0.8 ) ( 32 33 -0.2 ) ( 32 34 -0.4 ) ( 32 35 -0.6 ) ( 32 36 -0.8 ) ( 33 34 -0.2 ) ( 33 35 -0.4 ) ( 33 36 -0.6 ) ( 33 37 -0.8 ) ( 34 35 -0.2 ) ( 34 36 -0.4 ) ( 34 37 -0.6 ) ( 34 38 -0.8 ) ( 35 36 -0.2 ) ( 35 37 -0.4 ) ( 35 38 -0.6 ) ( 35 39 -0.8 ) ( 36 37 -0.2 ) ( 36 38 -0.4 ) ( 36 39 -0.6 ) ( 36 40 -0.8 ) ( 37 38 -0.2 ) ( 37 39 -0.4 ) ( 37 40 -0.6 ) ( 37 41 -0.8 ) ( 38 39 -0.2 ) ( 38 40 -0.4 ) ( 38 41 -0.6 ) ( 38 42 -0.8 ) ( 39 40 -0.2 ) ( 39 41 -0.4 ) ( 39 42 -0.6 ) ( 39 43 -0.8 ) ( 40 41 -0.2 ) ( 40 42 -0.4 ) ( 40 43 -0.6 ) ( 40 44 -0.8 ) ( 41 42 -0.2 ) ( 41 43 -0.4 ) ( 41 44 -0.6 ) ( 41 45 -0.8 ) ( 42 43 -0.2 ) ( 42 44 -0.4 ) ( 42 45 -0.6 ) ( 42 46 -0.8 ) ( 43 44 -0.2 ) ( 43 45 -0.4 ) ( 43 46 -0.6 ) ( 43 47 -0.8 ) ( 44 45 -0.2 ) ( 44 46 -0.4 ) ( 44 47 -0.6 ) ( 44 48 -0.8 ) ( 45 46 -0.2 ) ( 45 47 -0.4 ) ( 45 48 -0.6 ) ( 45 49 -0.8 ) ( 46 47 -0.2 ) ( 46 48 -0.4 ) ( 46 49 -0.6 ) ( 46 50 -0.8 ) ( 47 48 -0.2 ) ( 47 49 -0.4 ) ( 47 50 -0.6 ) ( 47 51 -0.8 ) ( 48 49 -0.2 ) ( 48 50 -0.4 ) ( 48 51 -0.6 ) ( 48 52 -0.8 ) ( 49 50 -0.2 ) ( 49 51 -0.4 ) ( 49 52 -0.6 ) ( 49 53 -0.8 ) ( 0 1 -100 ) ( 0 2 -100 ) ( 0 3 -100 ) ( 0 4 -100 ) ( 0 5 -100 ) ( 0 6 -100 ) ( 0 7 -100 ) ( 0 8 -100 ) ( 0 9 -100 ) ( 0 10 -100 ) ( 0 11 -100 ) ( 0 12 -100 ) ( 0 13 -100 ) ( 0 14 -100 ) ( 0 15 -100 ) ( 0 16 -100 ) ( 0 17 -100 ) ( 0 18 -100 ) ( 0 19 -100 ) ( 0 20 -100 ) ( 0 21 -100 ) ( 0 22 -100 ) ( 0 23 -100 ) ( 0 24 -100 ) ( 0 25 -100 ) ( 0 26 -100 ) ( 0 27 -100 ) ( 0 28 -100 ) ( 0 29 -100 ) ( 0 30 -100 ) ( 0 31 -100 ) ( 0 32 -100 ) ( 0 33 -100 ) ( 0 34 -100 ) ( 0 35 -100 ) ( 0 36 -100 ) ( 0 37 -100 ) ( 0 38 -100 ) ( 0 39 -100 ) ( 0 40 -100 ) ( 0 41 -100 ) ( 0 42 -100 ) ( 0 43 -100 ) ( 0 44 -100 ) ( 0 45 -100 ) ( 0 46 -100 ) ( 0 47 -100 ) ( 0 48 -100 ) ( 0 49 -100 ) ( 0 50 -100 ) ( 0 51 -100 ) ( 0 52 -100 ) ( 0 53 -100 ) ( 0 54 -100 ) ( 0 55 -100 ) ( 0 56 -100 ) ( 0 57 -100 ) ( 0 58 -100 ) ( 0 59 -100 ) ( 0 60 -100 ) ( 0 61 -100 ) ( 0 62 -100 ) ( 0 63 -100 ) ( 0 64 -100 ) ( 0 65 -100 ) ( 0 66 -100 ) ( 0 67 -100 ) ( 0 68 -100 ) ( 0 69 -100 ) ( 0 70 -100 ) ( 0 71 -100 ) ( 0 72 -100 ) ( 0 73 -100 ) ( 0 74 -100 ) ( 0 75 -100 ) ( 0 76 -100 ) ( 0 77 -100 ) ( 0 78 -100 ) ( 0 79 -100 ) ( 0 80 -100 ) ( 0 81 -100 ) ( 0 82 -100 ) ( 0 83 -100 ) ( 0 84 -100 ) ( 0 85 -100 ) ( 0 86 -100 ) ( 0 87 -100 ) ( 0 88 -100 ) ( 0 89 -100 ) ( 0 90 -100 ) ( 0 91 -100 ) ( 0 92 -100 ) ( 0 93 -100 ) ( 0 94 -100 ) ( 0 95 -100 ) ( 0 96 -100 ) ( 0 97 -100 ) ( 0 98 -100 ) ( 0 99 -100 ) ( 0 100 -100 ) ( 0 101 -100 ) ( 0 102 -100 ) ( 0 103 -100 ) ( 0 104 -100 ) ( 0 105 -100 ) ( 0 106 -100 ) ( 0 107 -100 ) ( 0 108 -100 ) ( 0 109 -100 ) ( 0 110 -100 ) ( 0 111 -100 ) ( 0 112 -100 ) ( 0 113 -100 ) ( 0 114 -100 ) ( 0 115 -100 ) ( 0 116 -100 ) ( 0 117 -100 ) ( 0 118 -100 ) ( 0 119 -100 ) ( 0 120 -100 ) ( 0 121 -100 ) ( 0 122 -100 ) ( 0 123 -100 ) ( 0 124 -100 ) ( 0 125 -100 ) ( 0 126 -100 ) ( 0 127 -100 ) ( 0 128 -100 ) ( 0 129 -100 ) ( 0 130 -100 ) ( 0 131 -100 ) ( 0 132 -100 ) ( 0 133 -100 ) ( 0 134 -100 ) ( 0 135 -100 ) ( 0 136 -100 ) ( 0 137 -100 ) ( 0 138 -100 ) ( 0 139 -100 ) ( 0 140 -100 ) ( 0 141 -100 ) ( 0 142 -100 ) ( 0 143 -100 ) ( 0 144 -100 ) ( 0 145 -100 ) ( 0 146 -100 ) ( 0 147 -100 ) ( 0 148 -100 ) ( 0 149 -100 ) ( 0 150 -100 ) ( 0 151 -100 ) ( 0 152 -100 ) ( 0 153 -100 ) ( 0 154 -100 ) ( 0 155 -100 ) ( 0 156 -100 ) ( 0 157 -100 ) ( 0 158 -100 ) ( 0 159 -100 ) ( 0 160 -100 ) ( 0 161 -100 ) ( 0 162 -100 ) ( 0 163 -100 ) ( 0 164 -100 ) ( 0 165 -100 ) ( 0 166 -100 ) ( 0 167 -100 ) ( 0 168 -100 ) ( 0 169 -100 ) ( 0 170 -100 ) ( 0 171 -100 ) ( 0 172 -100 ) ( 0 173 -100 ) ( 0 174 -100 ) ( 0 175 -100 ) ( 0 176 -100 ) ( 0 177 -100 ) ( 0 178 -100 ) ( 0 179 -100 ) ( 0 180 -100 ) ( 0 181 -100 ) ( 0 182 -100 ) ( 0 183 -100 ) ( 0 184 -100 ) ( 0 185 -100 ) ( 0 186 -100 ) ( 0 187 -100 ) ( 0 188 -100 ) ( 0 189 -100 ) ( 0 190 -100 ) ( 0 191 -100 ) ( 0 192 -100 ) ( 0 193 -100 ) ( 0 194 -100 ) ( 0 195 -100 ) ( 0 196 -100 ) ( 0 197 -100 ) ( 0 198 -100 ) ( 0 199 -100 ) ( 0 200 -100 ) ( 0 201 -100 ) ( 0 202 -100 ) ( 0 203 -100 ) ( 0 204 -100 ) ( 0 205 -100 ) ( 0 206 -100 ) ( 0 207 -100 ) ( 0 208 -100 ) ( 0 209 -100 ) ( 0 210 -100 ) ( 0 211 -100 ) ( 0 212 -100 ) ( 0 213 -100 ) ( 0 214 -100 ) ( 0 215 -100 ) ( 0 216 -100 ) ( 0 217 -100 ) ( 0 218 -100 ) ( 0 219 -100 ) ( 0 220 -100 ) ( 0 221 -100 ) ( 0 222 -100 ) ( 0 223 -100 ) ( 0 224 -100 ) ( 0 225 -100 ) ( 0 226 -100 ) ( 0 227 -100 ) ( 0 228 -100 ) ( 0 229 -100 ) ( 0 230 -100 ) ( 0 231 -100 ) ( 0 232 -100 ) ( 0 233 -100 ) ( 0 234 -100 ) ( 0 235 -100 ) ( 0 236 -100 ) ( 0 237 -100 ) ( 0 238 -100 ) ( 0 239 -100 ) ( 0 240 -100 ) ( 0 241 -100 ) ( 0 242 -100 ) ( 0 243 -100 ) ( 0 244 -100 ) ( 0 245 -100 ) ( 0 246 -100 ) ( 0 247 -100 ) ( 0 248 -100 ) ( 0 249 -100 ) ( 0 250 -100 ) ( 0 251 -100 ) ( 0 252 -100 ) ( 0 253 -100 ) ( 0 254 -100 ) ( 0 255 -100 ) ( 0 256 -100 ) ( 0 257 -100 ) ( 0 258 -100 ) ( 0 259 -100 ) ( 0 260 -100 ) ( 0 261 -100 ) ( 0 262 -100 ) ( 0 263 -100 ) ( 0 264 -100 ) ( 0 265 -100 ) ( 0 266 -100 ) ( 0 267 -100 ) ( 0 268 -100 ) ( 0 269 -100 ) ( 0 270 -100 ) ( 0 271 -100 ) ( 0 272 -100 ) ( 0 273 -100 ) ( 0 274 -100 ) ( 0 275 -100 ) ( 0 276 -100 ) ( 0 277 -100 ) ( 0 278 -100 ) ( 0 279 -100 ) ( 0 280 -100 ) ( 0 281 -100 ) ( 0 282 -100 ) ( 0 283 -100 ) ( 0 284 -100 ) ( 0 285 -100 ) ( 0 286 -100 ) ( 0 287 -100 ) ( 0 288 -100 ) ( 0 289 -100 ) ( 0 290 -100 ) ( 0 291 -100 ) ( 0 292 -100 ) ( 0 293 -100 ) ( 0 294 -100 ) ( 0 295 -100 ) ( 0 296 -100 ) ( 0 297 -100 ) ( 0 298 -100 ) ( 0 299 -100 ) ( 0 300 -100 ) ( 0 301 -100 ) ( 0 302 -100 ) ( 0 303 -100 ) ( 0 304 -100 ) ( 0 305 -100 ) ( 0 306 -100 ) ( 0 307 -100 ) ( 0 308 -100 ) ( 0 309 -100 ) ( 0 310 -100 ) ( 0 311 -100 ) ( 0 312 -100 ) ( 0 313 -100 ) ( 0 314 -100 ) ( 0 315 -100 ) ( 0 316 -100 ) ( 0 317 -100 ) ( 0 318 -100 ) ( 0 319 -100 ) ( 0 320 -100 ) ( 0 321 -100 ) ( 0 322 -100 ) ( 0 323 -100 ) ( 0 324 -100 ) ( 0 325 -100 ) ( 0 326 -100 ) ( 0 327 -100 ) ( 0 328 -100 ) ( 0 329 -100 ) ( 0 330 -100 ) ( 0 331 -100 ) ( 0 332 -100 ) ( 0 333 -100 ) ( 0 334 -100 ) ( 0 335 -100 ) ( 0 336 -100 ) ( 0 337 -100 ) ( 0 338 -100 ) ( 0 339 -100 ) ( 0 340 -100 ) ( 0 341 -100 ) ( 0 342 -100 ) ( 0 343 -100 ) ( 0 344 -100 ) ( 0 345 -100 ) ( 0 346 -100 ) ( 0 347 -100 ) ( 0 348 -100 ) ( 0 349 -100 ) ( 0 350 -100 ) ( 0 351 -100 ) ( 0 352 -100 ) ( 0 353 -100 ) ( 0 354 -100 ) ( 0 355 -100 ) ( 0 356 -100 ) ( 0 357 -100 ) ( 0 358 -100 ) ( 0 359 -100 ) ( 0 360 -100 ) ( 0 361 -100 ) ( 0 362 -100 ) ( 0 363 -100 ) ( 0 364 -100 ) ( 0 365 -100 ) ( 0 366 -100 ) ( 0 367 -100 ) ( 0 368 -100 ) ( 0 369 -100 ) ( 0 370 -100 ) ( 0 371 -100 ) ( 0 372 -100 ) ( 0 373 -100 ) ( 0 374 -100 ) ( 0 375 -100 ) ( 0 376 -100 ) ( 0 377 -100 ) ( 0 378 -100 ) ( 0 379 -100 ) ( 0 380 -100 ) ( 0 381 -100 ) ( 0 382 -100 ) ( 0 383 -100 ) ( 0 384 -100 ) ( 0 385 -100 ) ( 0 386 -100 ) ( 0 387 -100 ) ( 0 388 -100 ) ( 0 389 -100 ) ( 0 390 -100 ) ( 0 391 -100 ) ( 0 392 -100 ) ( 0 393 -100 ) ( 0 394 -100 ) ( 0 395 -100 ) ( 0 396 -100 ) ( 0 397 -100 ) ( 0 398 -100 ) ( 0 399 -100 ) ( 0 400 -100 ) ( 0 401 -100 ) ( 0 402 -100 ) ( 0 403 -100 ) ( 0 404 -100 ) ( 0 405 -100 ) ( 0 406 -100 ) ( 0 407 -100 ) ( 0 408 -100 ) ( 0 409 -100 ) ( 0 410 -100 ) ( 0 411 -100 ) ( 0 412 -100 ) ( 0 413 -100 ) ( 0 414 -100 ) ( 0 415 -100 ) ( 0 416 -100 ) ( 0 417 -100 ) ( 0 418 -100 ) ( 0 419 -100 ) ( 0 420 -100 ) ( 0 421 -100 ) ( 0 422 -100 ) ( 0 423 -100 ) ( 0 424 -100 ) ( 0 425 -100 ) ( 0 426 -100 ) ( 0 427 -100 ) ( 0 428 -100 ) ( 0 429 -100 ) ( 0 430 -100 ) ( 0 431 -100 ) ( 0 432 -100 ) ( 0 433 -100 ) ( 0 434 -100 ) ( 0 435 -100 ) ( 0 436 -100 ) ( 0 437 -100 ) ( 0 438 -100 ) ( 0 439 -100 ) ( 0 440 -100 ) ( 0 441 -100 ) ( 0 442 -100 ) ( 0 443 -100 ) ( 0 444 -100 ) ( 0 445 -100 ) ( 0 446 -100 ) ( 0 447 -100 ) ( 0 448 -100 ) ( 0 449 -100 ) ( 0 450 -100 ) ( 0 451 -100 ) ( 0 452 -100 ) ( 0 453 -100 ) ( 0 454 -100 ) ( 0 455 -100 ) ( 0 456 -100 ) ( 0 457 -100 ) ( 0 458 -100 ) ( 0 459 -100 ) ( 0 460 -100 ) ( 0 461 -100 ) ( 0 462 -100 ) ( 0 463 -100 ) ( 0 464 -100 ) ( 0 465 -100 ) ( 0 466 -100 ) ( 0 467 -100 ) ( 0 468 -100 ) ( 0 469 -100 ) ( 0 470 -100 ) ( 0 471 -100 ) ( 0 472 -100 ) ( 0 473 -100 ) ( 0 474 -100 ) ( 0 475 -100 ) ( 0 476 -100 ) ( 0 477 -100 ) ( 0 478 -100 ) ( 0 479 -100 ) ( 0 480 -100 ) ( 0 481 -100 ) ( 0 482 -100 ) ( 0 483 -100 ) ( 0 484 -100 ) ( 0 485 -100 ) ( 0 486 -100 ) ( 0 487 -100 ) ( 0 488 -100 ) ( 0 489 -100 ) ( 0 490 -100 ) ( 0 491 -100 ) ( 0 492 -100 ) ( 0 493 -100 ) ( 0 494 -100 ) ( 0 495 -100 ) ( 0 496 -100 ) ( 0 497 -100 ) ( 0 498 -100 ) ( 0 499 -100 ) ( 0 500 -100 ) ( 0 501 -100 ) ( 0 502 -100 ) ( 0 503 -100 ) ( 0 504 -100 ) ( 0 505 -100 ) ( 0 506 -100 ) ( 0 507 -100 ) ( 0 508 -100 ) ( 0 509 -100 ) ( 0 510 -100 ) ( 0 511 -100 ) ( 0 512 -100 ) ( 0 513 -100 ) ( 0 514 -100 ) ( 0 515 -100 ) ( 0 516 -100 ) ( 0 517 -100 ) ( 0 518 -100 ) ( 0 519 -100 ) ( 0 520 -100 ) ( 0 521 -100 ) ( 0 522 -100 ) ( 0 523 -100 ) ( 0 524 -100 ) ( 0 525 -100 ) ( 0 526 -100 ) ( 0 527 -100 ) ( 0 528 -100 ) ( 0 529 -100 ) ( 0 530 -100 ) ( 0 531 -100 ) ( 0 532 -100 ) ( 0 533 -100 ) ( 0 534 -100 ) ( 0 535 -100 ) ( 0 536 -100 ) ( 0 537 -100 ) ( 0 538 -100 ) ( 0 539 -100 ) ( 0 540 -100 ) ( 0 541 -100 ) ( 0 542 -100 ) ( 0 543 -100 ) ( 0 544 -100 ) ( 0 545 -100 ) ( 0 546 -100 ) ( 0 547 -100 ) ( 0 548 -100 ) ( 0 549 -100 ) ( 0 550 -100 ) ( 0 551 -100 ) ( 0 552 -100 ) ( 0 553 -100 ) ( 0 554 -100 ) ( 0 555 -100 ) ( 0 556 -100 ) ( 0 557 -100 ) ( 0 558 -100 ) ( 0 559 -100 ) ( 0 560 -100 ) ( 0 561 -100 ) ( 0 562 -100 ) ( 0 563 -100 ) ( 0 564 -100 ) ( 0 565 -100 ) ( 0 566 -100 ) ( 0 567 -100 ) ( 0 568 -100 ) ( 0 569 -100 ) ( 0 570 -100 ) ( 0 571 -100 ) ( 0 572 -100 ) ( 0 573 -100 ) ( 0 574 -100 ) ( 0 575 -100 ) ( 0 576 -100 ) ( 0 577 -100 ) ( 0 578 -100 ) ( 0 579 -100 ) ( 0 580 -100 ) ( 0 581 -100 ) ( 0 582 -100 ) ( 0 583 -100 ) ( 0 584 -100 ) ( 0 585 -100 ) ( 0 586 -100 ) ( 0 587 -100 ) ( 0 588 -100 ) ( 0 589 -100 ) ( 0 590 -100 ) ( 0 591 -100 ) ( 0 592 -100 ) ( 0 593 -100 ) ( 0 594 -100 ) ( 0 595 -100 ) ( 0 596 -100 ) ( 0 597 -100 ) ( 0 598 -100 ) ( 0 599 -100 ) ( 0 600 -100 ) ( 0 601 -100 ) ( 0 602 -100 ) ( 0 603 -100 ) ( 0 604 -100 ) ( 0 605 -100 ) ( 0 606 -100 ) ( 0 607 -100 ) ( 0 608 -100 ) ( 0 609 -100 ) ( 0 610 -100 ) ( 0 611 -100 ) ( 0 612 -100 ) ( 0 613 -100 ) ( 0 614 -100 ) ( 0 615 -100 ) ( 0 616 -100 ) ( 0 617 -100 ) ( 0 618 -100 ) ( 0 619 -100 ) ( 0 620 -100 ) ( 0 621 -100 ) ( 0 622 -100 ) ( 0 623 -100 ) ( 0 624 -100 ) ( 0 625 -100 ) ( 0 626 -100 ) ( 0 627 -100 ) ( 0 628 -100 ) ( 0 629 -100 ) ( 0 630 -100 ) ( 0 631 -100 ) ( 0 632 -100 ) ( 0 633 -100 ) ( 0 634 -100 ) ( 0 635 -100 ) ( 0 636 -100 ) ( 0 637 -100 ) ( 0 638 -100 ) ( 0 639 -100 ) ( 0 640 -100 ) ( 0 641 -100 ) ( 0 642 -100 ) ( 0 643 -100 ) ( 0 644 -100 ) ( 0 645 -100 ) ( 0 646 -100 ) ( 0 647 -100 ) ( 0 648 -100 ) ( 0 649 -100 ) ( 0 650 -100 ) ( 0 651 -100 ) ( 0 652 -100 ) ( 0 653 -100 ) ( 0 654 -100 ) ( 0 655 -100 ) ( 0 656 -100 ) ( 0 657 -100 ) ( 0 658 -100 ) ( 0 659 -100 ) ( 0 660 -100 ) ( 0 661 -100 ) ( 0 662 -100 ) ( 0 663 -100 ) ( 0 664 -100 ) ( 0 665 -100 ) ( 0 666 -100 ) ( 0 667 -100 ) ( 0 668 -100 ) ( 0 669 -100 ) ( 0 670 -100 ) ( 0 671 -100 ) ( 0 672 -100 ) ( 0 673 -100 ) ( 0 674 -100 ) ( 0 675 -100 ) ( 0 676 -100 ) ( 0 677 -100 ) ( 0 678 -100 ) ( 0 679 -100 ) ( 0 680 -100 ) ( 0 681 -100 ) ( 0 682 -100 ) ( 0 683 -100 ) ( 0 684 -100 ) ( 0 685 -100 ) ( 0 686 -100 ) ( 0 687 -100 ) ( 0 688 -100 ) ( 0 689 -100 ) ( 0 690 -100 ) ( 0 691 -100 ) ( 0 692 -100 ) ( 0 693 -100 ) ( 0 694 -100 ) ( 0 695 -100 ) ( 0 696 -100 ) ( 0 697 -100 ) ( 0 698 -100 ) ( 0 699 -100 ) ( 0 700 -100 ) ( 0 701 -100 ) ( 0 702 -100 ) ( 0 703 -100 ) ( 0 704 -100 ) ( 0 705 -100 ) ( 0 706 -100 ) ( 0 707 -100 ) ( 0 708 -100 ) ( 0 709 -100 ) ( 0 710 -100 ) ( 0 711 -100 ) ( 0 712 -100 ) ( 0 713 -100 ) ( 0 714 -100 ) ( 0 715 -100 ) ( 0 716 -100 ) ( 0 717 -100 ) ( 0 718 -100 ) ( 0 719 -100 ) ( 0 720 -100 ) ( 0 721 -100 ) ( 0 722 -100 ) ( 0 723 -100 ) ( 0 724 -100 ) ( 0 725 -100 ) ( 0 726 -100 ) ( 0 727 -100 ) ( 0 728 -100 ) ( 0 729 -100 ) ( 0 730 -100 ) ( 0 731 -100 ) ( 0 732 -100 ) ( 0 733 -100 ) ( 0 734 -100 ) ( 0 735 -100 ) ( 0 736 -100 ) ( 0 737 -100 ) ( 0 738 -100 ) ( 0 739 -100 ) ( 0 740 -100 ) ( 0 741 -100 ) ( 0 742 -100 ) ( 0 743 -100 ) ( 0 744 -100 ) ( 0 745 -100 ) ( 0 746 -100 ) ( 0 747 -100 ) ( 0 748 -100 ) ( 0 749 -100 ) ( 0 750 -100 ) ( 0 751 -100 ) ( 0 752 -100 ) ( 0 753 -100 ) ( 0 754 -100 ) ( 0 755 -100 ) ( 0 756 -100 ) ( 0 757 -100 ) ( 0 758 -100 ) ( 0 759 -100 ) ( 0 760 -100 ) ( 0 761 -100 ) ( 0 762 -100 ) ( 0 763 -100 ) ( 0 764 -100 ) ( 0 765 -100 ) ( 0 766 -100 ) ( 0 767 -100 ) ( 0 768 -100 ) ( 0 769 -100 ) ( 0 770 -100 ) ( 0 771 -100 ) ( 0 772 -100 ) ( 0 773 -100 ) ( 0 774 -100 ) ( 0 775 -100 ) ( 0 776 -100 ) ( 0 777 -100 ) ( 0 778 -100 ) ( 0 779 -100 ) ( 0 780 -100 ) ( 0 781 -100 ) ( 0 782 -100 ) ( 0 783 -100 ) ( 0 784 -100 ) ( 0 785 -100 ) ( 0 786 -100 ) ( 0 787 -100 ) ( 0 788 -100 ) ( 0 789 -100 ) ( 0 790 -100 ) ( 0 791 -100 ) ( 0 792 -100 ) ( 0 793 -100 ) ( 0 794 -100 ) ( 0 795 -100 ) ( 0 796 -100 ) ( 0 797 -100 ) ( 0 798 -100 ) ( 0 799 -100 ) ( 0 800 -100 ) ( 0 801 -100 ) ( 0 802 -100 ) ( 0 803 -100 ) ( 0 804 -100 ) ( 0 805 -100 ) ( 0 806 -100 ) ( 0 807 -100 ) ( 0 808 -100 ) ( 0 809 -100 ) ( 0 810 -100 ) ( 0 811 -100 ) ( 0 812 -100 ) ( 0 813 -100 ) ( 0 814 -100 ) ( 0 815 -100 ) ( 0 816 -100 ) ( 0 817 -100 ) ( 0 818 -100 ) ( 0 819 -100 ) ( 0 820 -100 ) ( 0 821 -100 ) ( 0 822 -100 ) ( 0 823 -100 ) ( 0 824 -100 ) ( 0 825 -100 ) ( 0 826 -100 ) ( 0 827 -100 ) ( 0 828 -100 ) ( 0 829 -100 ) ( 0 830 -100 ) ( 0 831 -100 ) ( 0 832 -100 ) ( 0 833 -100 ) ( 0 834 -100 ) ( 0 835 -100 ) ( 0 836 -100 ) ( 0 837 -100 ) ( 0 838 -100 ) ( 0 839 -100 ) ( 0 840 -100 ) ( 0 841 -100 ) ( 0 842 -100 ) ( 0 843 -100 ) ( 0 844 -100 ) ( 0 845 -100 ) ( 0 846 -100 ) ( 0 847 -100 ) ( 0 848 -100 ) ( 0 849 -100 ) ( 0 850 -100 ) ( 0 851 -100 ) ( 0 852 -100 ) ( 0 853 -100 ) ( 0 854 -100 ) ( 0 855 -100 ) ( 0 856 -100 ) ( 0 857 -100 ) ( 0 858 -100 ) ( 0 859 -100 ) ( 0 860 -100 ) ( 0 861 -100 ) ( 0 862 -100 ) ( 0 863 -100 ) ( 0 864 -100 ) ( 0 865 -100 ) ( 0 866 -100 ) ( 0 867 -100 ) ( 0 868 -100 ) ( 0 869 -100 ) ( 0 870 -100 ) ( 0 871 -100 ) ( 0 872 -100 ) ( 0 873 -100 ) ( 0 874 -100 ) ( 0 875 -100 ) ( 0 876 -100 ) ( 0 877 -100 ) ( 0 878 -100 ) ( 0 879 -100 ) ( 0 880 -100 ) ( 0 881 -100 ) ( 0 882 -100 ) ( 0 883 -100 ) ( 0 884 -100 ) ( 0 885 -100 ) ( 0 886 -100 ) ( 0 887 -100 ) ( 0 888 -100 ) ( 0 889 -100 ) ( 0 890 -100 ) ( 0 891 -100 ) ( 0 892 -100 ) ( 0 893 -100 ) ( 0 894 -100 ) ( 0 895 -100 ) ( 0 896 -100 ) ( 0 897 -100 ) ( 0 898 -100 ) ( 0 899 -100 ) ( 0 900 -100 ) ( 0 901 -100 ) ( 0 902 -100 ) ( 0 903 -100 ) ( 0 904 -100 ) ( 0 905 -100 ) ( 0 906 -100 ) ( 0 907 -100 ) ( 0 908 -100 ) ( 0 909 -100 ) ( 0 910 -100 ) ( 0 911 -100 ) ( 0 912 -100 ) ( 0 913 -100 ) ( 0 914 -100 ) ( 0 915 -100 ) ( 0 916 -100 ) ( 0 917 -100 ) ( 0 918 -100 ) ( 0 919 -100 ) ( 0 920 -100 ) ( 0 921 -100 ) ( 0 922 -100 ) ( 0 923 -100 ) ( 0 924 -100 ) ( 0 925 -100 ) ( 0 926 -100 ) ( 0 927 -100 ) ( 0 928 -100 ) ( 0 929 -100 ) ( 0 930 -100 ) ( 0 931 -100 ) ( 0 932 -100 ) ( 0 933 -100 ) ( 0 934 -100 ) ( 0 935 -100 ) ( 0 936 -100 ) ( 0 937 -100 ) ( 0 938 -100 ) ( 0 939 -100 ) ( 0 940 -100 ) ( 0 941 -100 ) ( 0 942 -100 ) ( 0 943 -100 ) ( 0 944 -100 ) ( 0 945 -100 ) ( 0 946 -100 ) ( 0 947 -100 ) ( 0 948 -100 ) ( 0 949 -100 ) ( 0 950 -100 ) ( 0 951 -100 ) ( 0 952 -100 ) ( 0 953 -100 ) ( 0 954 -100 ) ( 0 955 -100 ) ( 0 956 -100 ) ( 0 957 -100 ) ( 0 958 -100 ) ( 0 959 -100 ) ( 0 960 -100 ) ( 0 961 -100 ) ( 0 962 -100 ) ( 0 963 -100 ) ( 0 964 -100 ) ( 0 965 -100 ) ( 0 966 -100 ) ( 0 967 -100 ) ( 0 968 -100 ) ( 0 969 -100 ) ( 0 970 -100 ) ( 0 971 -100 ) ( 0 972 -100 ) ( 0 973 -100 ) ( 0 974 -100 ) ( 0 975 -100 ) ( 0 976 -100 ) ( 0 977 -100 ) ( 0 978 -100 ) ( 0 979 -100 ) ( 0 980 -100 ) ( 0 981 -100 ) ( 0 982 -100 ) ( 0 983 -100 ) ( 0 984 -100 ) ( 0 985 -100 ) ( 0 986 -100 ) ( 0 987 -100 ) ( 0 988 -100 ) ( 0 989 -100 ) ( 0 990 -100 ) ( 0 991 -100 ) ( 0 992 -100 ) ( 0 993 -100 ) ( 0 994 -100 ) ( 0 995 -100 ) ( 0 996 -100 ) ( 0 997 -100 ) ( 0 998 -100 ) ( 0 999 -100 ) )
;the initial list would every now and then be retrieved instead of another and kill the model
;that's why 0 (init list has id 0) is set so dissimilar with numbers up to 99.

(goal-focus goal1)
(goal-focus goal2)


;------------------------------------------------------------------------------------------------


    ;(p encode-first*
    ; =goal>
    ;isa		nback
    ;status		read-nback
    ;    list		0
    ;    ;=imaginal>
    ;    ; isa		nback-list
    ;    ;list-id		=lid
    ;    ;0back		=id0
    ;    =visual>
    ;    isa	speedsign
    ;    value	=slimit
    ;    =temporal>
    ;    ticks		=time
    ;    ==>
    ;    !bind! =state_id (get-state-id)
    
    ;    !output! (New Chunk)
    ;    !output! (id: =state_id)
    ;    !output! (speed: =slimit)
    ;    !output! (time: =time)
    
    ;    =goal>
    ;isa		nback
    ;    status		build-list
    ;    0time		=time
    ;    +imaginal>
    ;    isa		nback-state
    ;    id		=state_id
    ;    slimit		=slimit
    ;    time		=time
    ;    position	0
    
    ;    =visual>
    ;)

    ;(p build-initial-list*
    ;    =goal>
    ;    isa		nback
    ;    status		build-list
    ;    num		=num
    
    ;    0back		=id0
    ;    0speed	=0speed
    ;    0time		=0time
    
    ;    1back		=id1
    ;    1speed	=1speed
    ;    1time		=1time
    
    ;    2back		=id2
    
    ;    list	0
    
    ;true0back	=t0
    ;    true1back	=t1
    ;    true2back	=t2    
    ;    =imaginal>
    ;    isa		nback-state
    ;    slimit		=slimit
    ;    id		=id
    ;    ;=visual>
    ;    ;isa	speedsign
    ;    ;value	=slimit
    ;=temporal>
    ;    ticks	=time
    ;    ==>
    ;    !bind! =list_id (get-list-id)
    
    ;=goal>
    ;    isa	nback
    ;    status	rehearse-1
    ;    num	=num
    ;    list	=list_id
    ;    list-time	=time
    ;    
    ;    0back		=id
    ;    0speed	=slimit
    ;    
    ;1back		=id0
    ;    1speed	=0speed
    ;    1time	 	=0time
    
    ;    2back		=id1
    ;    2speed	=1speed
    ;    2time		=1time
    
    ;    true0back	=slimit
    ;    true1back	=t0
    ;    true2back	=t1    
    
    ; id-on-list-0	=id
    
    ;+imaginal>
    ;    isa	nback-list
    ;    0back	=id
    ;    1back	=id0
    ;    2back	=id1
    ;    list-id	=list_id
    ;    time	=time
    ;) 

    ;(p update-former-0back*
    ;    =goal>
    ;    isa		nback
    ;    status		update-0back
    ;    list		=lid
    ;    position 	zero
    ;    2back		0 ;no 2back set yet
    ;    =retrieval>
    ;    isa		nback-state
    ;    slimit		=slimit
    ;    id		=id
    ;    time		=1time
    ;    =imaginal>
    ;    isa		nback-state
    ;    id		=id0
    ;    ==>
    ;    !bind! =state_id (get-state-id)
    
    ;    !output! (Retrieved chunk:)
    ;    !output! (speed: 	=slimit)
    ;    !output! (id:	 =id)
    ;    !output! (time:	=time1)
    ;    !output! (-------------------)
    ;!output! (New chunk)
    ;    !output! (slimit:	=slimit)
    ;    !output! (id:	 =state_id)
    ;    !output! (time:	 =time1)
    
    ;=goal>
    ;isa		nback
    ;    status		encode-new
    ;    position 	one
    
    ;    0back		=id0
    
    ;    1time		=1time
    ;    1back		=state_id
    ;    2back		0
    
    ;    id-on-list-1	=state_id
    
    ;    +imaginal>
    ;    isa		nback-state
    ;    slimit		=slimit
    ;    id		=state_id
    ;    time		=1time      
    ;    position	1
    ;)
